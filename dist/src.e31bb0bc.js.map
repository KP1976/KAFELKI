{"version":3,"sources":["change-mode.js","index.js"],"names":["body","document","querySelector","startButton","radioLabels","querySelectorAll","switcher","titles","console","log","styleSheets","cssRules","switchColorTheme","addEventListener","checked","classList","add","radioLabel","title","remove"],"mappings":";;ACAA;;;;ADAA,ACEA,IDFMA,IAAI,GAAGC,QAAQ,CAACC,QCItB,KDJa,CAAuB,MAAvB,CAAb;AACA,IAAMC,WAAW,GAAGF,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAApB;AACA,ACGA,IDHME,WAAW,GAAGH,QAAQ,CAACI,gBAAT,CAA0B,gCAA1B,CAApB;AACA,IAAMC,QAAQ,GAAGL,QAAQ,CAACC,aAAT,CAAuB,gCAAvB,CAAjB;AACA,IAAMK,MAAM,GAAGN,QAAQ,CAACI,gBAAT,CAA0B,QAA1B,CAAf;AAEAG,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,WAAT,CAAqB,CAArB,EAAwBC,QAApC;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC9BN,ACGD,EDHCA,QAAQ,CAACO,gBAAT,CAA0B,OAA1B,EAAmC,YAAW;AAC7C,ACGF,QDHM,KAAKC,OAAT,EAAkB;AACjBd,ACGH,MDHGA,IAAI,CAACe,SAAL,CAAeC,GAAf,CAAmB,YAAnB;AACAb,ACIH,MDJGA,WAAW,CAACY,SAAZ,CAAsBC,GAAtB,CAA0B,YAA1B;AAFiB,ACQpB;ADRoB,ACSpB;ADToB,ACUpB;AAEA;ADZoB,ACapB;ADVG,ACWH,6BDX0BZ,WAAvB,8HAAoC;AAAA,ACYvC,cDZYa,UAA2B;AACnCA,ACaJ,UDbIA,UAAU,CAACF,SAAX,CAAqBC,GAArB,CAAyB,YAAzB;AACA,ACaJ;ADlBoB,ACmBpB;ADnBoB,ACoBpB;ADpBoB,ACqBpB;ADrBoB,ACsBpB;ADtBoB,ACuBpB;ADvBoB,ACyBpB;ADzBoB,AC0BpB;AD1BoB,AC2BpB;AD3BoB,AC4BpB;AD5BoB,AC8BpB;AD9BoB,AC+BpB;AD/BoB,ACgCpB;ADhCoB,ACiCpB;ADjCoB,ACkCpB;AACA;ADnCoB,ACoCpB;ADpCoB,ACsCpB;ADtCoB,ACwCpB;AACA;ADzCoB,AC0CpB;ADpCG,ACqCH,8BDrCqBT,MAAlB,mIAA0B;AAAA,ACsC7B,cDtCYW,KAAiB;AACzBA,ACsCJ,UDtCIA,KAAK,CAACH,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;AACA,ACsCJ;AD9CoB,AC+CpB;AD/CoB,ACgDpB;ADhDoB,ACkDpB;ADlDoB,ACmDpB;ADnDoB,ACoDpB;ADpDoB,ACqDpB;ADrDoB,ACsDpB;ADtDoB,ACuDpB;ADvDoB,ACwDpB;ADxDoB,AC0DpB;AD1DoB,AC2DpB;AD3DoB,AC4DpB;AD5DoB,AC6DpB;AD7DoB,AC8DpB;ADrDG,ACsDH,KD/DE,MASO;AACNhB,ACsDH,MDtDGA,IAAI,CAACe,SAAL,CAAeI,MAAf,CAAsB,YAAtB;AACAhB,ACsDH,MDtDGA,WAAW,CAACY,SAAZ,CAAsBI,MAAtB,CAA6B,YAA7B;AAFM,AC0DT;AD1DS;AAAA;;AAAA;AAGN,8BAAuBf,WAAvB,mIAAoC;AAAA,cAA3Ba,WAA2B;;AACnCA,UAAAA,WAAU,CAACF,SAAX,CAAqBI,MAArB,CAA4B,YAA5B;AACA;AALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAMN,8BAAkBZ,MAAlB,mIAA0B;AAAA,cAAjBW,MAAiB;;AACzBA,UAAAA,MAAK,CAACH,SAAN,CAAgBI,MAAhB,CAAuB,YAAvB;AACA;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASN;AACD,GApBD;AAqBA,CAtBD;;eAwBeP","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["const body = document.querySelector('body');\r\nconst startButton = document.querySelector('.button');\r\nconst radioLabels = document.querySelectorAll('.radios-container__radio-label');\r\nconst switcher = document.querySelector('.switch-mode-container__switch');\r\nconst titles = document.querySelectorAll('.title');\r\n\r\nconsole.log(document.styleSheets[1].cssRules);\r\n\r\nconst switchColorTheme = () => {\r\n\tswitcher.addEventListener('click', function() {\r\n\t\tif (this.checked) {\r\n\t\t\tbody.classList.add('light-mode');\r\n\t\t\tstartButton.classList.add('light-mode');\r\n\t\t\tfor (let radioLabel of radioLabels) {\r\n\t\t\t\tradioLabel.classList.add('light-mode');\r\n\t\t\t}\r\n\t\t\tfor (let title of titles) {\r\n\t\t\t\ttitle.classList.add('light-mode');\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tbody.classList.remove('light-mode');\r\n\t\t\tstartButton.classList.remove('light-mode');\r\n\t\t\tfor (let radioLabel of radioLabels) {\r\n\t\t\t\tradioLabel.classList.remove('light-mode');\r\n\t\t\t}\r\n\t\t\tfor (let title of titles) {\r\n\t\t\t\ttitle.classList.remove('light-mode');\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default switchColorTheme;\r\n","import switchColorTheme from './change-mode';\r\n\r\nswitchColorTheme();\r\n\r\n// DO ZROBIENIA\r\n/*\r\n\t1. Plansza startowa, gdzie mamy do wyboru 4 plansze: 4 x 3, 4 x 4, 6 x 3 i 5 x 4 (rząd x kolumna).\r\n\t2. Po wybraniu rodzaju planszy generowanie odpowiedniej liczby kafelków.\r\n\t3. Losowe przydzielanie koloru do połowy liczby kafelków.\r\n\t4. Pojawienie się kolorowej planszy na 3 sekundy po czym wszystkie stają  się szare.\r\n*/\r\n\r\n// import { generateTiles, DOMTilesContainer } from './create_tiles';\r\n// import cssVariables from './varaibles_from_css';\r\n// import randomNumbers from './random_numbers';\r\n\r\n// const numbersOfTiles = 20;\r\n\r\n// if (numbersOfTiles === 12 || numbersOfTiles === 18) {\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// if (numbersOfTiles === 16 || numbersOfTiles === 20) {\r\n// \tDOMTilesContainer.classList.add('four-columns');\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// class Tile {\r\n// \tconstructor(lightColor, shadowColor, isClicked) {\r\n// \t\tthis.lightColor = lightColor;\r\n// \t\tthis.shadowColor = shadowColor;\r\n// \t\tthis.isClicked = isClicked;\r\n// \t}\r\n// }\r\n\r\n// const cssVariablesColors = {};\r\n// let tilesColorsValues = [];\r\n// const allTiles = {};\r\n// let j = 0;\r\n\r\n// for (let i = 0; i < cssVariables.length; i++) {\r\n// \tlet keyValuePairs = cssVariables[i].split(':');\r\n// \ttilesColorsValues[i] = cssVariables[i].slice(-7);\r\n// \tif (keyValuePairs[0] !== '') {\r\n// \t\tcssVariablesColors[keyValuePairs[0].trim()] = keyValuePairs[1].trim();\r\n// \t}\r\n// }\r\n\r\n// const hexColorsNames = Object.keys(cssVariablesColors);\r\n\r\n// for (let i = 0; i < cssVariables.length / 2; i++) {\r\n// \tconst colorName = hexColorsNames[j].slice(2).slice(0, -6);\r\n// \tallTiles[colorName] = new Tile(\r\n// \t\ttilesColorsValues[j],\r\n// \t\ttilesColorsValues[j + 1],\r\n// \t\tfalse,\r\n// \t);\r\n// \tj += 2;\r\n// }\r\n\r\n// const removeColorsFromTiles = () => {\r\n// \tsetTimeout(() => {\r\n// \t\tfor (let i = 0; i < DOMTiles.length; i++) {\r\n// \t\t\tDOMTiles[i].classList = 'tiles-container__tile';\r\n// \t\t}\r\n// \t}, 2000);\r\n// };\r\n\r\n// j = 0;\r\n// for (let i = 0; i < DOMTiles.length; i++) {\r\n// \tDOMTiles[[...randomNumbers][i]].classList.add(Object.keys(allTiles)[j]);\r\n// \tj++;\r\n// \tif (j > 5) {\r\n// \t\tj = 0;\r\n// \t}\r\n// }\r\n\r\n// removeColorsFromTiles();\r\n"]}