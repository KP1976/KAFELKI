{"version":3,"sources":["change-mode.js","tiles-grid.js","get-rows-and-columns.js","index.js"],"names":["htmlDOM","document","documentElement","switcher","querySelector","moon","sun","changeThemeColorMode","addEventListener","switchColorTheme","e","target","checked","setAttribute","classList","remove","add","tilesContainer","margin","generateTilesGrid","rows","columns","innerHTML","i","j","tile","createElement","appendChild","dataset","gridColumns","marginTiles","radioInputs","querySelectorAll","getTilesBoardDimension","getRowsAndColumns","diemensionString","nextElementSibling","textContent","boardRows","parseInt","charAt","boardColumns","length"],"mappings":";;AGAA;;AACA;;AHDA,ACAA,IDAMA,ACAAiB,ODAO,GAAGhB,ICAI,GAAGA,CDAC,CAACC,MCAM,CAACE,QDAhC,KCAuB,CAAuB,aAAvB,CAAvB;ADCA,AEDA,ADCA,IDAMD,ACAFe,MAAJ,EDAc,GAAGjB,QAAQ,CAACG,aAAT,CAAuB,gCAAvB,CAAjB;AACA,AGCAH,IHDMI,IAAI,AGCF,CAACD,EHDIH,QAAQ,CAACG,EGCtB,CAAuB,UHDV,CAAuB,UAAvB,CAAb,IGCA,EAAmDQ,OAAnD,GAA6D,IAA7D;AHAA,AGEA,AFFA,IDAMN,ACAAa,GDAG,GAAGlB,QAAQ,CAACG,ECAE,GAAG,QDAd,CAAuB,ACA7Be,SDAM,CAAZ,OCA0B,CAACC,IAAD,EAAOC,OAAP,EAAmB;AEG7C,AFFCJ,EAAAA,cAAc,CAACK,SAAf,EEID,CFJ4B,EAA3B;ADCD,AEHA,IFGMf,AEHAwB,WAAW,GAAG9B,MFGM,EEHE,CFGC,AEHA+B,SFGvBzB,OEHc,CAA0B,YFGjB,GAAM,iBEHf,CAApB;AFICJ,AEFD,ACKA,AFJC,EDCAA,KCDK,GDCG,CAACK,ACDAe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,ECDH,CAAlB,EFEC,AEFoB,CFEM,AEF3B,CDCC,EAA6BE,CAAC,EAA9B,CDCA,CCDkC,CDCCd,gBAAnC;AACA,ACDC,CDDF,QCCO,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;ACAjC,ADCG,ICDGS,MDCGR,IAAI,GAAGxB,QAAQ,CCDI,ADCHyB,GCDM,SAAzBO,CDCU,CAAuB,IAAvB,CAAb,eCD4B,GAAM;AFGrC,AEFC,IFEKxB,EEFCyB,cFEe,GAAG,AEFD,GAAG,MFErBzB,GEFCyB,aFEkB,CAAAxB,CAAC,EAAI,AEFH,CAAAA,CAAC,EAAI;AFG/B,AEFC,ADAC,MDEEA,CAAC,CAACC,AEFCwB,EDADf,IDEF,ACFM,CDEGR,ICFE,CAAb,EDEF,ACFkB,EDEI,AEFC,GAAGF,CAAC,CAACC,MAAF,CAASyB,kBAAT,CAA4BC,WAArD;AFGArC,AEFA,ADAEyB,IDEFzB,IEFMsC,ADAJb,GDEK,CAACZ,ACFF,CAACC,ICAQ,GAAGyB,EDAhB,CAAevB,CDEjB,CAAqB,CCFnB,CAAmB,CCAK,CAACmB,YFE3B,EAAuC,EEFI,ADAzC,CCA0CK,IFE5C,EEF2B,CAAwB,CAAxB,CAAD,CAA1B;AFGAnC,AEFA,ACMF,AFNIoB,IDEFpB,IAAI,AEFEoC,ADAJhB,CDEGX,GCFC,CAACA,KDEP,CAAeC,CEFG,EDAhB,CCAmBwB,ADAJxB,EDEjB,CAAsB,GCFpB,CAAsB,CCAK,CAC5BoB,KFCD,KCFE,MCCe,CAACK,MAAjB,CAAwBL,gBAAgB,CAACO,MAAjB,GAA0B,CAAlD,CAD4B,CAA7B;AFGApC,AGIF,AFNImB,IDEFnB,GAAG,CAACQ,ACFFW,IAAI,CAACX,IDEP,CAAcE,GAAd,CAAkB,ACFhB,CAAeD,MAAf,CAAsB,GDExB,YCFE;ADGF,AEAA,ACIF,AFNIG,GDFH,KEIKR,ADFFQ,CDEI,AEAD,CAACP,IDFE,ECEJ,CAASC,ADFF,KAAT,ECEF,EAAsB;AFCtBZ,AEAC,ACKH,AFPI,IDEFA,OAAO,CAACa,YAAR,CAAqB,KEAFyB,SAAlB,EFAD,AEA8BG,EFAS,MAAvC,IEAC;AFCDpC,AEAC,ACMH,IHNEA,IAAI,CAACS,SAAL,CAAeE,GAAf,CAAmB,WAAnB;AACAV,AEAA,ACMF,AFTG,GCPF,CFUCA,GAAG,CAACQ,ECHCM,IAAI,GDGT,CAAcL,CCHA,CAAb,EAAgB,EDGjB,CAAqB,WAArB;AACA,AGMF,AFTIU,QAAAA,IAAI,CAACX,SAAL,CAAeE,GAAf,CAAmB,kBAAnB;ADIH,AEAA,ACOD,AFVIS,CDPJ,MEUM,CDHFA,GCGMF,CAAC,ADHH,CAACT,ECGK,CAAb,EAAgBS,CAAC,GAAGQ,ADHjB,CAAef,GAAf,CAAmB,MCGS,CAAC0B,KDH7B,CCGH,EAAwCnB,CAAC,EAAzC,EAA6C;AAC5CQ,ACOF,AFVIN,ICGFM,IDHEN,IAAI,CAACX,ECGI,CAACS,CAAD,CAAX,CAAef,GDHb,CAAeO,MAAf,CAAsB,KCGxB,CAAgC,QAAhC,CDHE,CCGwCmB,iBAA1C;AACA,ACOF,AFVIhB,QAAAA,MAAM,CDGKX,ECHF,QAAT;ACIH,ACOD,AFVI,CCbJ;ACyBA;AACA,AFZG,UAAIa,IAAI,CCIIa,IDJC,CAAb,EAAgB;AEanB,AFZIR,QAAAA,IAAI,CAACX,SAAL,CAAeE,GAAf,CAAmB,kBAAnB;AEaJ,AFZIS,QAAAA,IAAI,CAACX,SAAL,CAAeC,MAAf,CAAsB,YAAtB;AEaJ,AFZIU,QAAAA,IAAI,CAACX,SAAL,CAAeE,GAAf,CAAmB,eAAnB;AEaJ,AFZIE,QAAAA,MAAM,GAAG,OAAT;AEaJ,AFZI;AEcJ;AACA,AFdGD,MAAAA,cAAc,CAACU,WAAf,CAA2BF,IAA3B;AEeH,AFdG;AEeH,AFdE;AEgBF;AACA,AFhBCR,EAAAA,cAAc,CAACW,OAAf,CAAuBC,WAAvB,GAAqCR,OAArC;AEiBD,AFhBCJ,EAAAA,cAAc,CAACW,OAAf,CAAuBE,WAAvB,GAAqCZ,MAArC;AEiBD,AFhBC,CA5BD;AE6CA;AACA,eFhBeC;AEiBf;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["const htmlDOM = document.documentElement;\r\nconst switcher = document.querySelector('.switch-mode-container__switch');\r\nconst moon = document.querySelector('.fa-moon');\r\nconst sun = document.querySelector('.fa-sun');\r\n\r\nconst changeThemeColorMode = () => {\r\n\tswitcher.addEventListener('click', switchColorTheme);\r\n};\r\n\r\nconst switchColorTheme = e => {\r\n\tif (e.target.checked) {\r\n\t\thtmlDOM.setAttribute('data-colormode', 'light');\r\n\t\tmoon.classList.remove('isVisible');\r\n\t\tsun.classList.add('isVisible');\r\n\t} else {\r\n\t\thtmlDOM.setAttribute('data-colormode', 'dark');\r\n\t\tmoon.classList.add('isVisible');\r\n\t\tsun.classList.remove('isVisible');\r\n\t}\r\n};\r\n\r\nexport default changeThemeColorMode;\r\n","const tilesContainer = document.querySelector('.tiles-grid');\r\nlet margin;\r\n\r\nconst generateTilesGrid = (rows, columns) => {\r\n\ttilesContainer.innerHTML = '';\r\n\tfor (let i = 0; i < columns; i++) {\r\n\t\tfor (let j = 0; j < rows; j++) {\r\n\t\t\tconst tile = document.createElement('li');\r\n\t\t\tif (rows === 4) {\r\n\t\t\t\ttile.classList.add('tiles-grid__tile');\r\n\t\t\t\ttile.classList.remove('small-tile');\r\n\t\t\t\ttile.classList.remove('smallest-tile');\r\n\t\t\t\tmargin = 'big';\r\n\t\t\t}\r\n\t\t\tif (rows === 5) {\r\n\t\t\t\ttile.classList.add('tiles-grid__tile');\r\n\t\t\t\ttile.classList.add('small-tile');\r\n\t\t\t\ttile.classList.remove('smallest-tile');\r\n\t\t\t\tmargin = 'medium';\r\n\t\t\t}\r\n\t\t\tif (rows === 6) {\r\n\t\t\t\ttile.classList.add('tiles-grid__tile');\r\n\t\t\t\ttile.classList.remove('small-tile');\r\n\t\t\t\ttile.classList.add('smallest-tile');\r\n\t\t\t\tmargin = 'small';\r\n\t\t\t}\r\n\t\t\ttilesContainer.appendChild(tile);\r\n\t\t}\r\n\t}\r\n\ttilesContainer.dataset.gridColumns = columns;\r\n\ttilesContainer.dataset.marginTiles = margin;\r\n};\r\n\r\nexport default generateTilesGrid;\r\n","import generateTilesGrid from './tiles-grid';\r\n\r\nconst radioInputs = document.querySelectorAll('.radios-container__radio-input');\r\n\r\ngenerateTilesGrid(4, 3);\r\n\r\nconst getTilesBoardDimension = () => {\r\n\tconst getRowsAndColumns = e => {\r\n\t\tconst diemensionString = e.target.nextElementSibling.textContent;\r\n\t\tconst boardRows = parseInt(diemensionString.charAt(0));\r\n\t\tconst boardColumns = parseInt(\r\n\t\t\tdiemensionString.charAt(diemensionString.length - 1),\r\n\t\t);\r\n\r\n\t\tif (e.target.checked) {\r\n\t\t\tgenerateTilesGrid(boardRows, boardColumns);\r\n\t\t}\r\n\t};\r\n\r\n\tfor (let i = 0; i < radioInputs.length; i++) {\r\n\t\tradioInputs[i].addEventListener('change', getRowsAndColumns);\r\n\t}\r\n};\r\n\r\nexport default getTilesBoardDimension;\r\n","import changeThemeColorMode from './change-mode';\r\nimport getTilesBoardDimension from './get-rows-and-columns';\r\n\r\ndocument.querySelector('.radios-container__radio').checked = true;\r\n\r\ngetTilesBoardDimension();\r\nchangeThemeColorMode();\r\n\r\n// DO ZROBIENIA\r\n/*\r\n\t1. Plansza startowa, gdzie mamy do wyboru 4 plansze: 4 x 3, 4 x 4, 6 x 3 i 5 x 4 (rząd x kolumna).\r\n\t2. Po wybraniu rodzaju planszy generowanie odpowiedniej liczby kafelków.\r\n\t3. Losowe przydzielanie koloru do połowy liczby kafelków.\r\n\t4. Pojawienie się kolorowej planszy na 3 sekundy po czym wszystkie stają  się szare.\r\n*/\r\n\r\n// import { generateTiles, DOMTilesContainer } from './create_tiles';\r\n// import cssVariables from './varaibles_from_css';\r\n// import randomNumbers from './random_numbers';\r\n\r\n// const numbersOfTiles = 20;\r\n\r\n// if (numbersOfTiles === 12 || numbersOfTiles === 18) {\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// if (numbersOfTiles === 16 || numbersOfTiles === 20) {\r\n// \tDOMTilesContainer.classList.add('four-columns');\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// class Tile {\r\n// \tconstructor(lightColor, shadowColor, isClicked) {\r\n// \t\tthis.lightColor = lightColor;\r\n// \t\tthis.shadowColor = shadowColor;\r\n// \t\tthis.isClicked = isClicked;\r\n// \t}\r\n// }\r\n\r\n// const cssVariablesColors = {};\r\n// let tilesColorsValues = [];\r\n// const allTiles = {};\r\n// let j = 0;\r\n\r\n// for (let i = 0; i < cssVariables.length; i++) {\r\n// \tlet keyValuePairs = cssVariables[i].split(':');\r\n// \ttilesColorsValues[i] = cssVariables[i].slice(-7);\r\n// \tif (keyValuePairs[0] !== '') {\r\n// \t\tcssVariablesColors[keyValuePairs[0].trim()] = keyValuePairs[1].trim();\r\n// \t}\r\n// }\r\n\r\n// const hexColorsNames = Object.keys(cssVariablesColors);\r\n\r\n// for (let i = 0; i < cssVariables.length / 2; i++) {\r\n// \tconst colorName = hexColorsNames[j].slice(2).slice(0, -6);\r\n// \tallTiles[colorName] = new Tile(\r\n// \t\ttilesColorsValues[j],\r\n// \t\ttilesColorsValues[j + 1],\r\n// \t\tfalse,\r\n// \t);\r\n// \tj += 2;\r\n// }\r\n\r\n// const removeColorsFromTiles = () => {\r\n// \tsetTimeout(() => {\r\n// \t\tfor (let i = 0; i < DOMTiles.length; i++) {\r\n// \t\t\tDOMTiles[i].classList = 'tiles-container__tile';\r\n// \t\t}\r\n// \t}, 2000);\r\n// };\r\n\r\n// j = 0;\r\n// for (let i = 0; i < DOMTiles.length; i++) {\r\n// \tDOMTiles[[...randomNumbers][i]].classList.add(Object.keys(allTiles)[j]);\r\n// \tj++;\r\n// \tif (j > 5) {\r\n// \t\tj = 0;\r\n// \t}\r\n// }\r\n\r\n// removeColorsFromTiles();\r\n"]}