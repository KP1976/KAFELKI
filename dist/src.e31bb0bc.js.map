{"version":3,"sources":["change-mode.js","tiles-grid.js","get-rows-and-columns.js","index.js"],"names":["htmlDOM","document","documentElement","switcher","querySelector","moon","sun","changeThemeColorMode","addEventListener","switchColorTheme","e","target","checked","setAttribute","classList","remove","add","console","log","tilesContainer","generateTilesGrid","rows","columns","innerHTML","i","j","tile","createElement","appendChild","dataset","gridColumns","marginTiles","radioInputs","querySelectorAll","getTilesBoardDimension","getRowsAndColumns","diemensionString","nextElementSibling","textContent","boardRows","parseInt","charAt","boardColumns","length"],"mappings":";;AGAA;;AACA;;AHDA,ACAA,IDAMA,ACAAmB,ODAO,GAAGlB,ICAI,GAAGA,CDAC,CAACC,MCAM,CAACE,QDAhC,KCAuB,CAAuB,aAAvB,CAAvB,EACA;ADAA,AEDA,ADEA,IDDMD,QAAQ,GAAGF,QAAQ,CAACG,aAAT,CAAuB,gCAAvB,CAAjB;AACA,AGCA,AFAA,IDDMC,IAAI,GAAGJ,QAAQ,CAACG,aAAT,CAAuB,UAAvB,CAAb;AACA,AGCA,IHDME,GAAG,GAAGL,QAAQ,CAACG,SGGrB,IHHY,CAAuB,SAAvB,CAAZ;ACEA,IAAMgB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,OAAP,EAAmB;ADA7C,AEHA,ACKA,AFDCH,EAAAA,EDDKZ,AEHAyB,WAAW,CDIF,CAACT,CCJItB,MFGM,EEHE,ADI3B,CDD4B,AEHAgC,EDID,EAA3B,KDDK1B,OEHc,CAA0B,YFGjB,GAAM,iBEHf,CAApB;AFICJ,AEFD,EFECA,QAAQ,CAACK,aEFQ,CAAlB,EFEC,AEFoB,CFEM,AEF3B,OFEC,EAAmCC,gBAAnC;AACA,ACAA,CDFD,MCEM,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6BE,CAAC,EAA9B,EAAkC;ACDnC,ADEE,ICFIU,KDEC,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,ECFM,EDE1B,CCF6B,CDEHI,CAAC,EAA3B,EAA+B,GCF3BS,sBAAyB,GAAM;AFGrC,AEFC,ADEE,IDAGzB,EEFC0B,IDEET,IAAI,GAAGzB,GDAM,GAAG,AEFD,EDEA,CCFG,ADEF0B,MDAnBlB,GEFC0B,IDES,CAAuB,IAAvB,CAAb,GDAsB,CAAAzB,CAAC,EAAI,AEFH,CAAAA,CAAC,EAAI;AFG/B,AEFC,ADECgB,MDAEhB,ACAFgB,CDAG,CAACf,AEFCyB,EDED,CAACtB,GDAH,CAASF,KCAX,CAAeI,CDAjB,EAAsB,AEFC,ADErB,CAAmB,ECFKN,CAAC,CAACC,MAAF,CAAS0B,ODEjC,WCFwB,CAA4BC,WAArD;AFGAtC,AEFA,ACKF,AFHGmB,IDADnB,ECACmB,ECFKoB,GFEC,CAAC1B,KEFO,GAAG2B,ADEH,CAACZ,GDAhB,CAAqB,GEFK,CAACQ,GDE1B,CAA2BV,IAA3B,IDAD,EAAuC,EEFI,CAACe,IFE5C,EEF2B,CAAwB,CAAxB,CAAD,CAA1B;AFGApC,AEFA,ACKF,AFHG,IDADA,IAAI,AEFEqC,CFED5B,SAAL,CAAeC,CEFG,GAAGyB,EFErB,CAAsB,KEFO,CAC5BJ,KFCD,WEDiB,CAACK,MAAjB,CAAwBL,gBAAgB,CAACO,MAAjB,GAA0B,CAAlD,CAD4B,CAA7B;AFGArC,AGGF,AFHE,IDAAA,GAAG,CAACQ,SAAJ,CAAcE,GAAd,CAAkB,WAAlB;AACA,AEAA,ACIF,GHRC,KEIKN,CFAE,AEAD,CAACC,MAAF,CAASC,OAAb,EAAsB;AFCtBZ,AEAC,ACKH,AFNCmB,EAAAA,EDCCnB,OAAO,CAACa,ICDK,CAACgB,ODCd,ACDD,CDCsB,ACDCC,KCCHS,MDDpB,GCCE,ADDmCjB,EDCpC,AEA8BoB,EFAS,GCDxC,GDCC,IEAC;AFCDrC,AEAC,ACKH,AFNCc,EAAAA,EDCCd,IAAI,CAACS,OCDQ,CAACe,CDCd,CAAeb,GAAf,CAAmB,CCDpB,CAAuBe,SDCtB,ECDD,GAAqC,IAAIT,OAAJ,GAAc,CAAnD,CAV4C,CAY5C;ADAChB,AEAA,ACKF,AFJC,GCXA,CFUCA,GAAG,CAACQ,SAAJ,CAAcC,MAAd,CAAqB,WAArB;AACA,AGMF,AFLC;ACAA,ACMD,AFLC,OCDK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,WAAW,CAACW,MAAhC,EAAwCnB,CAAC,EAAzC,EAA6C;AFA7CP,AECCe,ACMF,AFLC,EDFAf,EECCe,KFDM,CAACd,GAAR,CAAYb,CECA,CAACmB,CAAD,CFDZ,AECC,CAAehB,gBAAf,CAAgC,QAAhC,EAA0C2B,iBAA1C;AFAD,AECC,ACMF,AFLC,CDbD;AEaC,ACOD,AFNC,CCjBD;ACwBA,AFNC,eDFc5B;AGSf,AFNC,eCDc2B;ACQf,AFNC;AEOD,AFNC;AEOD,AFNC;AEOD,AFNC;AEQD,AFPC;AEQD,AFPC;AEQD,AFPC;AEQD,AFPC;AESD,AFRC;AESD,AFRC;AESD,AFRC;AESD,AFRC;AESD,AFRC;AESD,AFRC,CAlCD;AE2CA;AAEA,eFTed;AEWf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["const htmlDOM = document.documentElement;\r\nconst switcher = document.querySelector('.switch-mode-container__switch');\r\nconst moon = document.querySelector('.fa-moon');\r\nconst sun = document.querySelector('.fa-sun');\r\n\r\nconst changeThemeColorMode = () => {\r\n\tswitcher.addEventListener('click', switchColorTheme);\r\n};\r\n\r\nconst switchColorTheme = e => {\r\n\tif (e.target.checked) {\r\n\t\thtmlDOM.setAttribute('data-colormode', 'light');\r\n\t\tmoon.classList.remove('isVisible');\r\n\t\tsun.classList.add('isVisible');\r\n\t} else {\r\n\t\thtmlDOM.setAttribute('data-colormode', 'dark');\r\n\t\tmoon.classList.add('isVisible');\r\n\t\tsun.classList.remove('isVisible');\r\n\t}\r\n\tconsole.log(moon);\r\n};\r\n\r\nexport default changeThemeColorMode;\r\n","const tilesContainer = document.querySelector('.tiles-grid');\r\n// const mainTitle = document.querySelector('.title');\r\n// const containerOfTiles = document.querySelector('.container-of-tiles');\r\n// const buttonStart = document.querySelector('.button');\r\n\r\nconst generateTilesGrid = (rows, columns) => {\r\n\ttilesContainer.innerHTML = '';\r\n\tfor (let i = 0; i < columns; i++) {\r\n\t\tfor (let j = 0; j < rows; j++) {\r\n\t\t\tconst tile = document.createElement('li');\r\n\t\t\ttile.classList.add('tiles-grid__tile');\r\n\t\t\ttilesContainer.appendChild(tile);\r\n\t\t}\r\n\t}\r\n\ttilesContainer.dataset.gridColumns = columns;\r\n\ttilesContainer.dataset.marginTiles = 2 * columns + 1;\r\n\r\n\t// if (rows === 5) {\r\n\t// \tmainTitle.classList.add('margin-five-rows');\r\n\t// \tcontainerOfTiles.classList.add('margin-five-rows');\r\n\t// \tbuttonStart.classList.add('margin-five-rows');\r\n\t// \tmainTitle.classList.remove('margin-six-rows');\r\n\t// \tcontainerOfTiles.classList.remove('margin-six-rows');\r\n\t// \tbuttonStart.classList.remove('margin-six-rows');\r\n\t// } else if (rows === 6) {\r\n\t// \tmainTitle.classList.remove('margin-five-rows');\r\n\t// \tcontainerOfTiles.classList.remove('margin-five-rows');\r\n\t// \tbuttonStart.classList.remove('margin-five-rows');\r\n\t// \tmainTitle.classList.add('margin-six-rows');\r\n\t// \tcontainerOfTiles.classList.add('margin-six-rows');\r\n\t// \tbuttonStart.classList.add('margin-six-rows');\r\n\t// } else {\r\n\t// \tmainTitle.classList.remove('margin-five-rows');\r\n\t// \tcontainerOfTiles.classList.remove('margin-five-rows');\r\n\t// \tbuttonStart.classList.remove('margin-five-rows');\r\n\t// \tmainTitle.classList.remove('margin-six-rows');\r\n\t// \tcontainerOfTiles.classList.remove('margin-six-rows');\r\n\t// \tbuttonStart.classList.remove('margin-six-rows');\r\n\t// }\r\n};\r\n\r\nexport default generateTilesGrid;\r\n","import generateTilesGrid from './tiles-grid';\r\n\r\nconst radioInputs = document.querySelectorAll('.radios-container__radio-input');\r\n\r\ngenerateTilesGrid(4, 3);\r\n\r\nconst getTilesBoardDimension = () => {\r\n\tconst getRowsAndColumns = e => {\r\n\t\tconst diemensionString = e.target.nextElementSibling.textContent;\r\n\t\tconst boardRows = parseInt(diemensionString.charAt(0));\r\n\t\tconst boardColumns = parseInt(\r\n\t\t\tdiemensionString.charAt(diemensionString.length - 1),\r\n\t\t);\r\n\r\n\t\tif (e.target.checked) {\r\n\t\t\tgenerateTilesGrid(boardRows, boardColumns);\r\n\t\t}\r\n\t};\r\n\r\n\tfor (let i = 0; i < radioInputs.length; i++) {\r\n\t\tradioInputs[i].addEventListener('change', getRowsAndColumns);\r\n\t}\r\n};\r\n\r\nexport default getTilesBoardDimension;\r\n","import changeThemeColorMode from './change-mode';\r\nimport getTilesBoardDimension from './get-rows-and-columns';\r\n\r\ngetTilesBoardDimension();\r\nchangeThemeColorMode();\r\n\r\n// DO ZROBIENIA\r\n/*\r\n\t1. Plansza startowa, gdzie mamy do wyboru 4 plansze: 4 x 3, 4 x 4, 6 x 3 i 5 x 4 (rząd x kolumna).\r\n\t2. Po wybraniu rodzaju planszy generowanie odpowiedniej liczby kafelków.\r\n\t3. Losowe przydzielanie koloru do połowy liczby kafelków.\r\n\t4. Pojawienie się kolorowej planszy na 3 sekundy po czym wszystkie stają  się szare.\r\n*/\r\n\r\n// import { generateTiles, DOMTilesContainer } from './create_tiles';\r\n// import cssVariables from './varaibles_from_css';\r\n// import randomNumbers from './random_numbers';\r\n\r\n// const numbersOfTiles = 20;\r\n\r\n// if (numbersOfTiles === 12 || numbersOfTiles === 18) {\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// if (numbersOfTiles === 16 || numbersOfTiles === 20) {\r\n// \tDOMTilesContainer.classList.add('four-columns');\r\n// \tgenerateTiles(numbersOfTiles);\r\n// }\r\n\r\n// class Tile {\r\n// \tconstructor(lightColor, shadowColor, isClicked) {\r\n// \t\tthis.lightColor = lightColor;\r\n// \t\tthis.shadowColor = shadowColor;\r\n// \t\tthis.isClicked = isClicked;\r\n// \t}\r\n// }\r\n\r\n// const cssVariablesColors = {};\r\n// let tilesColorsValues = [];\r\n// const allTiles = {};\r\n// let j = 0;\r\n\r\n// for (let i = 0; i < cssVariables.length; i++) {\r\n// \tlet keyValuePairs = cssVariables[i].split(':');\r\n// \ttilesColorsValues[i] = cssVariables[i].slice(-7);\r\n// \tif (keyValuePairs[0] !== '') {\r\n// \t\tcssVariablesColors[keyValuePairs[0].trim()] = keyValuePairs[1].trim();\r\n// \t}\r\n// }\r\n\r\n// const hexColorsNames = Object.keys(cssVariablesColors);\r\n\r\n// for (let i = 0; i < cssVariables.length / 2; i++) {\r\n// \tconst colorName = hexColorsNames[j].slice(2).slice(0, -6);\r\n// \tallTiles[colorName] = new Tile(\r\n// \t\ttilesColorsValues[j],\r\n// \t\ttilesColorsValues[j + 1],\r\n// \t\tfalse,\r\n// \t);\r\n// \tj += 2;\r\n// }\r\n\r\n// const removeColorsFromTiles = () => {\r\n// \tsetTimeout(() => {\r\n// \t\tfor (let i = 0; i < DOMTiles.length; i++) {\r\n// \t\t\tDOMTiles[i].classList = 'tiles-container__tile';\r\n// \t\t}\r\n// \t}, 2000);\r\n// };\r\n\r\n// j = 0;\r\n// for (let i = 0; i < DOMTiles.length; i++) {\r\n// \tDOMTiles[[...randomNumbers][i]].classList.add(Object.keys(allTiles)[j]);\r\n// \tj++;\r\n// \tif (j > 5) {\r\n// \t\tj = 0;\r\n// \t}\r\n// }\r\n\r\n// removeColorsFromTiles();\r\n"]}